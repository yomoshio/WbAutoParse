from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from functools import partial

from app.parsers.parser import parse_wb_product
from app.bot.services.keyword import SearchKeywords
from app.api.v1.WB_stat import WB_stat
from app.bot.services.keyword_position import find_product_position
import aiohttp
from app.utils.extract_vendor import extract_article_from_url


router = Router()



class SearchStates(StatesGroup):
    waiting_for_url = State()



def setup_handlers(dp, chat_gpt):
    router.message.register(partial(cmd_search, chat_gpt=chat_gpt), Command("search"))
    router.message.register(partial(process_url, chat_gpt=chat_gpt), StateFilter(SearchStates.waiting_for_url))
    dp.include_router(router)



async def cmd_search(message: Message, state: FSMContext, chat_gpt):
    await state.set_state(SearchStates.waiting_for_url)
    await message.answer("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries.")



async def process_url(message: Message, state: FSMContext, chat_gpt):
    url = message.text.strip()
    article = extract_article_from_url(url)
    
    if not article:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        await state.clear()
        return

    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")

    try:
        title, description = await parse_wb_product(url)
        await message.answer(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description[:200]}...")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await state.clear()
        return
    async with aiohttp.ClientSession() as session:
        try:
            
            keyword_generator = SearchKeywords(chat_gpt=chat_gpt)
            keywords = await keyword_generator.generate_keywords(session=session, title=title, description=description)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
            await state.clear()
            return

    await message.answer("üìà –ò—â—É –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")

    results = []
    for kw in keywords:
        pos = await find_product_position(kw, article)
        result_line = f"üîé {kw} ‚Äî {'–ø–æ–∑–∏—Ü–∏—è ' + str(pos) if pos else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}"
        results.append(result_line)

    await message.answer("\n".join(results[:20]))

    await state.clear()
