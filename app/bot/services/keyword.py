from typing import List, Tuple
import aiohttp
import asyncio
from aiocache import Cache, cached
from aiohttp import ClientTimeout



class SearchKeywords:
    def __init__(self, chat_gpt):
        self.chat_gpt = chat_gpt
        self.timeout = ClientTimeout(total=10)


    async def generate_keywords(self, session: aiohttp.ClientSession, title: str, description: str) -> List[str]:
        description = description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã –æ–ø—ã—Ç–Ω—ã–π SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è Wildberries.\n"
                    "–ú—ã—Å–ª–∏ –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: —á–µ—Ä–µ–∑ –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã –æ–Ω –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?\n"
                    "–£—á–∏—Ç—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.\n"
                    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑, –∫–∞–∂–¥–∞—è ‚Äî –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Å–∞–º–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑."
                )
            },
            {
                "role": "user",
                "content": f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            }
        ]

        for attempt in range(3):
            try:
                res = await self.chat_gpt.ask(
                    session=session,
                    messages=messages,
                    model="gpt-4.1-nano",
                    timeout=self.timeout
                )
                raw_keywords = res["choices"][0]["message"]["content"].strip().split("\n")
                keywords = [kw.strip() for kw in raw_keywords if kw.strip()]
                print(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è '{title}': {keywords}... (–≤—Å–µ–≥–æ {len(keywords)})")
                return keywords
            except asyncio.TimeoutError:
                print(f"‚è≥ –¢–∞–π–º–∞—É—Ç –≤ generate_keywords –¥–ª—è '{title}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3)")
                if attempt < 2:
                    await asyncio.sleep(1)
                else:
                    print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{title}', –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                    return []
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_keywords –¥–ª—è '{title}': {e}")
                return []
